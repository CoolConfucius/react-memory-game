mar25
issues getting messy. 
notes start here. 

react made decision react is agonna update in dom...
understandign life cycle hooks is what takes you from beginer to medium react dev

Event pooling
you have synthesized event object. can't use it asynchronisly. react reuses this event. 
null because react is doign event pooling. 

Controlled components
...

warning cuz out of sync with state? 

enchance fake browser to be in sync with input. 
so when i type in the dom, i really wan tto tye p in the fake broswr. respect the facke browser. we can wrtie some short cod tot make it into the fake broswer. 
we replace the typing behvior with something in react. 
block me from typing? what happens is, when you type, react resets the value to 42. the staet doesn't change. state value is 42. rerender to 42. it looks like you can't type. 


wehn we type, we want to change the state. 


Test.js
import React from "react";


class Test extends React.Component {
  constructor(props) {
    super(props);
    this.state = { x: 42 };
  }
  handleChange(event){
    // console.log(event.target.value);
    this.setState({ x: event.target.value });
  }
  render() {
    return (
      <div>
        Testing Controlled Components
        <br />
        {this.state.x}
        <br />
        <input value={this.state.x}/>
      </div>
    );
  }
}

export default Test;

now in sync with fake broweser. taht's kind of like two way data binding. 

from reacts perspective i'm enhancing fake browswer. we call this a contorolled input component. 

if i have a button... 
import React from "react";


class Test extends React.Component {
  constructor(props) {
    super(props);
    this.state = { x: 42 };
  }
  handleChange(event){
    // console.log(event.target.value);
    this.setState({ x: event.target.value });
  }
  render() {
    return (
      <div>
        Testing Controlled Components
        <br />
        {this.state.x}
        <br />
        <input value={this.state.x} 
          onChange={this.handleChange.bind(this)}
          />
        <button onClick={() => alert(this.state.x) }>Alert</button>
      </div>
    );
  }
}

export default Test;





import React from "react";

import Game from "./Game";

class Container extends React.Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      <div>
        <Game rows={"five"} columns={5} randomCellCount={6} />
      </div>
    );
  }
}

export default Container;


nothing happened. that's worse than an error. you don't know what's going on. 
reason is, component didn't know what to do with "five" it wants a number, not a string. 
to way to fix it is, make the component complain. 
javascript is not a typed language. that's why big players like angular and react want typs. 

Prop types

Game.propTypes = {
  rows: React.PropTypes.number,
  columns: React.PropTypes.number
}

Cell.propTypes = {
  recordGuess: React.PropTypes.func
}

it's func, not function 